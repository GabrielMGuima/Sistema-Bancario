from abc import ABC, abstractmethod
from datetime import datetime
import textwrap

class Cliente:
    def __init__(self, endereço):
        self.endereço = endereço
        self.contas = []

    def realizar_transação(self, conta, transação):
        transação.registrar(conta)

    def adicionar_conta(self, conta):
        self.contas.append(conta)

class PessoaFisica(Cliente):
    def __init__(self, nome, data_nascimento, cpf, endereço):
        super().__init__(endereço)
        self.nome = nome
        self.data_nascimento = data_nascimento
        self.cpf = cpf

class Conta:
    def __init__(self, numero, cliente):
        self._saldo = 0
        self._numero = numero
        self._agencia = "0321"
        self._cliente = cliente
        self._historico = Historico()

    @classmethod
    def nova_conta(cls, cliente, numero):
        return cls(numero, cliente)

    @property
    def saldo(self):
        return self._saldo

    @property
    def numero(self):
        return self._numero

    @property
    def agencia(self):
        return self._agencia

    @property
    def cliente(self):
        return self._cliente

    @property
    def historico(self):
        return self._historico

    def sacar(self, valor):
        if valor > self._saldo:
            print("\nOperação Falhou!! Você não tem saldo suficiente na conta.")
            return False

        elif valor > 0:
            self._saldo -= valor
            print('\n--- Saque realizado com Sucesso!! ---')
            return True

        else:
            print('Operação Falhou!! O valor informado é inválido.')
            return False

    def depositar(self, valor):
        if valor > 0:
            self._saldo += valor
            print('\n--- Depósito realizado com Sucesso! ---')
            return True

        else:
            print ('\nOperação Falhou! O valor informado é inválido.')
            return False

    def __str__(self):
        return f'''\
            Agência:\t{self.agencia}
            C/C:\t\t{self.numero}
            Titular:\t{self.cliente.nome}'''

class ContaCorrente(Conta):
    def __init__(self, numero, cliente, limite=500, limite_saques=3):
        super().__init__(numero, cliente)
        self.limite = limite
        self.limite_saques = limite_saques

    def sacar(self, valor):
        numero_saques = len([transacao for transacao in self._historico.transações if transacao['tipo'] == 'Saque'])
        excedeu_limite = valor > self.limite
        excedeu_saques = numero_saques >= self.limite_saques

        if excedeu_limite:
            print('\nOperação falhou! O valor do saque excedeu o limite.')

        elif excedeu_saques:
            print('\nOperação falhou! Número máximo de saques mensais excedido.')

        else:
            sucesso_transacao = super().sacar(valor)
            if sucesso_transacao:
                self._historico.adicionar_transação({'tipo': 'Saque', 'valor': valor})
                return True

        return False

    def __str__(self):
        return f'''\
            Agência:\t{self._agencia}
            C/C:\t\t{self._numero}
            Titular:\t{self._cliente.nome}'''


class Historico:
    def __init__(self):
        self._transações = []

    @property
    def transações(self):
        return self._transações

    def adicionar_transação(self, transação):
        self._transações.append({
            'tipo': transação['tipo'],
            'valor': transação['valor']
        })

class Transação(ABC):
    @property
    @abstractmethod
    def valor(self):
        pass

    @abstractmethod
    def registrar(self, conta):
        pass

class Saque(Transação):
    def __init__(self, valor):
        self._valor = valor

    @property
    def valor(self):
        return self._valor

    def registrar(self, conta):
        conta.sacar(self.valor)
        conta.historico.adicionar_transação({'tipo': 'Saque', 'valor': self.valor})

class Deposito(Transação):
    def __init__(self, valor):
        self._valor = valor

    @property
    def valor(self):
        return self._valor

    def registrar(self, conta):
        conta.depositar(self.valor)
        conta.historico.adicionar_transação({'tipo': 'Depósito', 'valor': self.valor})

def menu():
    menu = '''\n
    ---------- MENU ----------
    [1]\tDepositar
    [2]\tSacar
    [3]\tExtrato
    [4]\tNova Conta
    [5]\tListar Contas
    [6]\tNovo Usuário
    [0]\tSair
    => '''
    return input(textwrap.dedent(menu))

def filtrar_cliente(cpf, clientes):
    clientes_filtrados = [cliente for cliente in clientes if cliente.cpf == cpf]
    return clientes_filtrados[0] if clientes_filtrados else None

def recuperar_conta_cliente(cliente):
    if not cliente.contas:
        print('Cliente não possui conta!')
        return None
    return cliente.contas[0]

def sacar(clientes):
    cpf = input('Informe o CPF do Cliente:')
    cliente = filtrar_cliente(cpf, clientes)
    if not cliente:
        print('\nCliente não encontrado!')
        return
    valor = float(input('Informe o valor que deseja sacar:'))
    transação = Saque(valor)
    conta = recuperar_conta_cliente(cliente)
    if not conta:
        return
    cliente.realizar_transação(conta, transação)

def depositar(clientes):
    cpf = input('Informe o CPF do Cliente:')
    cliente = filtrar_cliente(cpf, clientes)

    if not cliente:
        print('\nCliente não encontrado!')
        return

    valor = float(input('Informe o valor que deseja depositar:'))
    transação = Deposito(valor)

    conta = recuperar_conta_cliente(cliente)
    if not conta:
        return

    cliente.realizar_transação(conta, transação)

def exibir_extrato(clientes):
    cpf = input('Informe o CPF do cliente:')
    cliente = filtrar_cliente(cpf, clientes)

    if not cliente:
        print('\nCliente não encontrado!')
        return

    conta = recuperar_conta_cliente(cliente)
    if not conta:
        return

    print('\n---------- EXTRATO ----------')
    transações = conta.historico.transações

    if not transações:
        print('Não foram realizadas movimentações.')

    else:
        for transação in transações:
            print(f"{transação['tipo']}:\tR$ {transação['valor']:.2f}")

    print(f'Saldo:\tR$ {conta.saldo:.2f}')
    print('-------------------------------------')

def criar_conta(numero_conta, clientes, contas):
    cpf = input('Informe o CPF do cliente:')
    cliente = filtrar_cliente(cpf, clientes)

    if not cliente:
        print('\nCliente não encontrado, fluxo de criação de conta encerrado!')
        return

    conta = ContaCorrente.nova_conta(cliente=cliente, numero=numero_conta)
    contas.append(conta)
    cliente.contas.append(conta)

    print('\n--- Conta criada com sucesso! ---')

def listar_contas(contas):
    for conta in contas:
        print('='*100)
        print(textwrap.dedent(str(conta)))

def criar_cliente(clientes):
    cpf = input('Informe o CPF (somente números):')
    cliente = filtrar_cliente(cpf, clientes)

    if cliente:
        print('\nJá existe cliente com esse CPF!')
        return

    nome = input('Informe o nome completo:')
    data_nascimento = input('Informe a data de nascimento (dd-mm-aaaa):')
    endereço = input('Informe o endereço (logradouro, nro - bairro - cidade/sigla estado):')

    cliente = PessoaFisica(nome=nome, data_nascimento=data_nascimento, cpf=cpf, endereço=endereço)
    clientes.append(cliente)
    print('\n--- Cliente criado com sucesso! ---')

def main():
    clientes = []
    contas = []

    while True:
        opção = menu()
        if opção == '1':
            depositar(clientes)

        elif opção == '2':
            sacar(clientes)

        elif opção == '3':
            exibir_extrato(clientes)

        elif opção == '4':
            numero_conta = len(contas) + 1
            criar_conta(numero_conta, clientes, contas)

        elif opção == '5':
            listar_contas(contas)

        elif opção == '6':
            criar_cliente(clientes)

        elif opção == '0':
            break

        else:
            print('\nOperação inválida, por favor selecione novamente a operação desejada.')

if __name__ == "__main__":
    main()
